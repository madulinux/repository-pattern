<?php

namespace {{ namespace }};

use App\Repositories\Interfaces\{{ repository }}RepositoryInterface;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Pagination\LengthAwarePaginator;
use MaduLinux\RepositoryPattern\DataTransferObjects\PaginationParameters;

class {{ class }}Service 
{
    protected ${{ repositoryVariable }}Repository;

    public function __construct({{ repository }}RepositoryInterface ${{ repositoryVariable }}Repository)
    {
        $this->{{ repositoryVariable }}Repository = ${{ repositoryVariable }}Repository;
    }

    public function getAll(): Collection
    {
        return $this->{{ repositoryVariable }}Repository->all();
    }

    public function getPaginated(array $params = []): LengthAwarePaginator
    {
        $paginatedParams = PaginationParameters::fromArray($params);
        return $this->{{ repositoryVariable }}Repository->getPaginated($paginatedParams);
    }

    public function findById($id): ?Model
    {
        return $this->{{ repositoryVariable }}Repository->find($id);
    }

    public function create(array $data): Model
    {
        // Add any business logic here before creating
        return $this->{{ repositoryVariable }}Repository->create($data);
    }

    public function update($id, array $data): bool
    {
        // Add any business logic here before updating
        return $this->{{ repositoryVariable }}Repository->update($id, $data);
    }

    public function delete($id): bool
    {
        // Add any business logic here before deleting
        return $this->{{ repositoryVariable }}Repository->delete($id);
    }

    /**
     * Insert multiple records
     *
     * @param array $records
     * @return bool
     */
    public function insert(array $records): bool
    {
        return $this->{{ repositoryVariable }}Repository->insert($records);
    }

    /**
     * Update multiple records
     *
     * @param array $values
     * @param array|string $uniqueBy
     * @param array|null $update
     * @return int
     */
    public function bulkUpdate(array $values, array $conditions): int
    {
        return $this->{{ repositoryVariable }}Repository->bulkUpdate($values, $conditions);
    }

    /**
     * Delete multiple records
     *
     * @param array $ids
     * @return int
     */
    public function bulkDelete(array $ids): int
    {
        return $this->{{ repositoryVariable }}Repository->bulkDelete($ids);
    }

    /**
     * Upsert records
     *
     * @param array $values
     * @param array|string $uniqueBy
     * @param array|null $update
     * @return bool
     */
    public function upsert(array $values, $uniqueBy, ?array $update = null): bool
    {
        return $this->{{ repositoryVariable }}Repository->upsert($values, $uniqueBy, $update);
    }
}

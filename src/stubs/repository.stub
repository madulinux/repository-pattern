<?php

namespace {{ namespace }};

use App\Models\{{ model }};
use {{ namespace }}\Interfaces\{{ class }}RepositoryInterface;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Pagination\LengthAwarePaginator;

class {{ class }}Repository implements {{ class }}RepositoryInterface
{
    protected $model;
    protected $query;

    public function __construct({{ modelClass }} $model)
    {
        $this->model = $model;
        $this->query = $model->newQuery();
    }

    public function all(): Collection
    {
        return $this->query->get();
    }

    public function paginate(array $params = []): LengthAwarePaginator
    {
        $perPage = $params['per_page'] ?? 15;
        return $this->query->paginate($perPage);
    }

    public function find($id): ?Model
    {
        return $this->query->find($id);
    }

    public function create(array $data): Model
    {
        return $this->model->create($data);
    }

    public function update($id, array $data): bool
    {
        $model = $this->find($id);
        if (!$model) {
            return false;
        }
        return $model->update($data);
    }

    public function delete($id): bool
    {
        return $this->model->destroy($id);
    }

    public function search(string $query, array $columns = ['*']): Collection
    {
        return $this->buildSearchQuery($query, $columns)->get();
    }

    public function searchPaginated(string $query, array $columns = ['*'], array $params = []): LengthAwarePaginator
    {
        $perPage = $params['per_page'] ?? 15;
        return $this->buildSearchQuery($query, $columns)->paginate($perPage);
    }

    public function orderBy(string $column, string $direction = 'asc'): self
    {
        $this->query->orderBy($column, $direction);
        return $this;
    }

    public function filter(array $filters): self
    {
        foreach ($filters as $field => $value) {
            if (is_array($value)) {
                if (isset($value['operator'])) {
                    $this->query->where($field, $value['operator'], $value['value']);
                } else {
                    $this->query->whereIn($field, $value);
                }
            } else {
                $this->query->where($field, $value);
            }
        }
        return $this;
    }

    public function with(array $relations): self
    {
        $this->query->with($relations);
        return $this;
    }

    protected function buildSearchQuery(string $query, array $columns): Builder
    {
        $this->query->where(function ($q) use ($query, $columns) {
            foreach ($columns as $column) {
                $q->orWhere($column, 'LIKE', "%{$query}%");
            }
        });
        
        return $this->query;
    }

    protected function resetQuery(): void
    {
        $this->query = $this->model->newQuery();
    }

    public function __call($method, $arguments)
    {
        $this->query = $this->query->{$method}(...$arguments);
        return $this;
    }
}
